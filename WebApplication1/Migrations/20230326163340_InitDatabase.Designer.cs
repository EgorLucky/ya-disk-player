// <auto-generated />
using System;
using Implementations.EFModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(YaDiskPlayerDbContext))]
    [Migration("20230326163340_InitDatabase")]
    partial class InitDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Implementations.EFModels.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("LastUpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentFolder")
                        .HasColumnType("text");

                    b.Property<string>("ParentFolderPath")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<Guid>("SynchronizationProcessId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("YandexResourceId")
                        .HasColumnType("text");

                    b.Property<string>("YandexUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SynchronizationProcessId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Implementations.EFModels.IgnorePath", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("PathHash")
                        .HasColumnType("text");

                    b.Property<string>("YandexUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IgnorePaths");
                });

            modelBuilder.Entity("Implementations.EFModels.SynchronizationProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastFileId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("LastUpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Offset")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("StartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SynchronizationProcesses");
                });

            modelBuilder.Entity("Implementations.EFModels.SynchronizationProcessError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MessageText")
                        .HasColumnType("text");

                    b.Property<Guid>("SynchronizationProcessId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SynchronizationProcessId");

                    b.ToTable("SynchronizationProcessErrors");
                });

            modelBuilder.Entity("Implementations.EFModels.SynchronizationProcessUserCancellation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SynchronizationProcessId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SynchronizationProcessId");

                    b.ToTable("SynchronizationProcessUserCancellations");
                });

            modelBuilder.Entity("Implementations.EFModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("ActivateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeactivateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .HasColumnType("text");

                    b.Property<Guid?>("InviteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("Lastname")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Sex")
                        .HasColumnType("text");

                    b.Property<string>("YandexId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Implementations.EFModels.File", b =>
                {
                    b.HasOne("Implementations.EFModels.SynchronizationProcess", null)
                        .WithMany()
                        .HasForeignKey("SynchronizationProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Implementations.EFModels.SynchronizationProcess", b =>
                {
                    b.HasOne("Implementations.EFModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Implementations.EFModels.SynchronizationProcessError", b =>
                {
                    b.HasOne("Implementations.EFModels.SynchronizationProcess", null)
                        .WithMany()
                        .HasForeignKey("SynchronizationProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Implementations.EFModels.SynchronizationProcessUserCancellation", b =>
                {
                    b.HasOne("Implementations.EFModels.SynchronizationProcess", null)
                        .WithMany()
                        .HasForeignKey("SynchronizationProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
